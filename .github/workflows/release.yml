name: Release Standalone App

on:
  workflow_dispatch:
  workflow_run:
    workflows: ["Build Standalone App"]
    types:
      - completed

jobs:
  release:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install Required Python Packages
      run: |
        python -m pip install --upgrade pip
        pip install toml

    - name: Extract Version from pyproject.toml
      run: |
        VERSION=$(python -c "import toml; print(toml.load('pyproject.toml')['project']['version'])")
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: Download Artifacts
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.PAT_TOKEN }}
        script: |
          const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
            owner: context.repo.owner,
            repo: context.repo.repo,
            run_id: ${{ github.event.workflow_run.id }}
          });

          const fs = require('fs');
          const path = require('path');

          if (!fs.existsSync('artifacts')) {
            fs.mkdirSync('artifacts');
          }

          for (const artifact of artifacts.data.artifacts) {
            console.log(`Downloading artifact: ${artifact.name}`);
            const download = await github.rest.actions.downloadArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: artifact.id,
              archive_format: 'zip'
            });

            fs.writeFileSync(path.join('artifacts', `${artifact.name}.zip`), Buffer.from(download.data));
          }

    - name: Prepare Release Assets
      run: |
        mkdir -p release_assets
        cd artifacts

        for zipfile in *.zip; do
          dir_name=$(basename "$zipfile" .zip)
          unzip "$zipfile" -d "../release_assets/$dir_name/"
        done

        cd ../release_assets
        for dir in */; do
          cd "$dir"
          zip "../tcia_download_manager-${dir%/}.zip" *
          cd ..
        done

    - name: List Release Assets
      run: ls -alh release_assets/

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
      with:
        tag_name: v${{ env.VERSION }}
        release_name: Release v${{ env.VERSION }}
        body: |
          Automated release of tcia_download_manager
        draft: false
        prerelease: false

    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: release_assets/tcia_download_manager-*.zip
        asset_name: ${{ matrix.os }}.zip
        asset_content_type: application/zip
