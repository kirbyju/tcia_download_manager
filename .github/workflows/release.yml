name: Release Standalone App

on:
  workflow_dispatch:
  workflow_run:
    workflows: ["Build Standalone App"]
    types:
      - completed

jobs:
  release:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Extract Version from setup.py
      run: |
        VERSION=$(python -c "import re; print(re.search(r\"version='([^']*)'\", open('setup.py').read()).group(1))")
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: Download Artifacts
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.PAT_TOKEN }}
        script: |
          const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
            owner: context.repo.owner,
            repo: context.repo.repo,
            run_id: ${{ github.event.workflow_run.id }}
          });

          const fs = require('fs');
          const path = require('path');

          if (!fs.existsSync('artifacts')) {
            fs.mkdirSync('artifacts');
          }

          for (const artifact of artifacts.data.artifacts) {
            console.log(`Downloading artifact: ${artifact.name}`);
            const download = await github.rest.actions.downloadArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: artifact.id,
              archive_format: 'zip'
            });

            fs.writeFileSync(path.join('artifacts', `${artifact.name}.zip`), Buffer.from(download.data));
          }

    - name: List Artifacts
      run: |
        ls artifacts/

    - name: Prepare Release Assets
      run: |
        mkdir -p release_assets
        cd artifacts

        # Create separate directories to prevent overwriting
        mkdir -p ../windows ../macos ../ubuntu

        # Use wildcards to find and extract artifacts
        for zipfile in tcia_download_manager*windows*.zip; do
          unzip "$zipfile" -d ../windows
        done

        for zipfile in tcia_download_manager*macos*.zip; do
          unzip "$zipfile" -d ../macos
        done

        for zipfile in tcia_download_manager*ubuntu*.zip; do
          unzip "$zipfile" -d ../ubuntu
        done

        # Zip artifacts in their respective directories
        cd ../windows
        zip "../tcia_download_manager-windows.zip" *

        cd ../macos
        chmod +x *
        zip "../tcia_download_manager-macos.zip" *

        cd ../ubuntu
        chmod +x *
        zip "../tcia_download_manager-ubuntu.zip" *

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
      with:
        tag_name: v${{ env.VERSION }}
        release_name: Release v${{ env.VERSION }}
        body: |
          Automated release of tcia_download_manager
        draft: false
        prerelease: false

    - name: Upload Windows Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: tcia_download_manager-windows.zip
        asset_name: tcia_download_manager-windows.zip
        asset_content_type: application/zip
      continue-on-error: true

    - name: Upload macOS Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: tcia_download_manager-macos.zip
        asset_name: tcia_download_manager-macos.zip
        asset_content_type: application/zip
      continue-on-error: true

    - name: Upload Ubuntu Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: tcia_download_manager-ubuntu.zip
        asset_name: tcia_download_manager-ubuntu.zip
        asset_content_type: application/zip
      continue-on-error: true
